@page "/Registro/Cobros/Create"

@inject CobrosService cobroService
@inject DeudoresService deudoresService
@inject PrestamosService prestamosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>
<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Cobro</h5>
            </div>

            <div class="card-body">
                @* CobroId *@
                <div class="mb-3">
                    <label class="form-label"><strong>CobroId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Cobro.CobroId" readonly></InputNumber>
                </div>

                @* Fecha *@
                <div class="mb-3">
                    <label class="form-label"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Cobro.Fecha"></InputDate>
                </div>

                @* Deudor *@
                <div class="mb-3">
                    <label class="form-label"><strong>Deudor</strong></label>

                    <div class="input-group">

                        <InputSelect class="form-control form-select" @bind-Value="Cobro.DeudorId">
                            <option value="0" selected disabled>Elija una opción</option>
                            @foreach (var deudor in ListaDeudores)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </InputSelect>
                        <button type="button" class="btn btn-outline-success bi bi-arrow-clockwise" 
                                @onclick="BuscarPrestamosPendientes"> Buscar</button>
                        
                    </div>
                    
                    <ValidationMessage For="(() => Cobro.DeudorId)" />
                </div>

                @* Monto *@
                <div class="col-6 ms-3">
                    <label class="form-label"><strong>Monto</strong></label>
                    <InputSelect class="form-control" @bind-Value="Cobro.Monto">
                        <option value="" selected disabled>Elija una opción</option>
                        @foreach (var prestamo in ListaPrestamos)
                        {
                            <option value="@prestamo.Monto">PrestamoId @prestamo.PrestamosId - $ @prestamo.Monto</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => Cobro.Monto)" />
                </div>

                @* Detalles del Cobro *@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles del Cobro</h5>

                    @* Id prestamo *@
                    <div class="row">
                        <div class="col-2">
                            <label class="form-label"><strong>Buscar Id</strong></label>
                            <button type="button" class="btn btn-primary" @onclick="BuscarPrestamosPendientes">Buscar</button>
                        </div>
                        <div class="col-4">
                            <label class="form-label"><strong>Préstamo ID</strong></label>
                            
                            <InputSelect class="form-control" @bind-Value="DetalleSeleccionado.PrestamoId">
                                <option value="" selected disabled>Elija una opción</option>
                                @foreach (var prestamo in ListaPrestamos)
                                {
                                    <option value="@prestamo.PrestamosId">@prestamo.PrestamosId</option>
                                }
                            </InputSelect>
                        </div>
                        @* Valor Cobrado *@
                        <div class="col-2">
                            <label class="form-label"><strong>Valor Cobrado</strong></label>
                            <InputNumber class="form-control" @bind-Value="DetalleSeleccionado.ValorCobrado"></InputNumber>
                        </div>
                        <div class="col-4">
                            @* <button type="button" class="btn btn-success mt-4" @onclick="AgregarDetalle">Agregar Detalle</button> *@
                        </div>
                    </div>

                    <ul class="mt-3">
                        @foreach (var detalle in Cobro.CobroDetalle)
                        {
                            <li class="mt-2">Préstamo ID: @detalle.PrestamoId, Valor Cobrado: @detalle.ValorCobrado
                                <button type="button" @onclick="() => RemoverDetalle(detalle)" class="btn btn-outline-danger btn-sm ms-2">Eliminar</button>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            @* footer *@
            <div class="card-footer text-center mt-2">
                <a href="/Registro/Cobro/Index" class="btn btn-primary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@Mensaje

@code {
    public Cobros Cobro { get; set; } = new Cobros();
    public CobrosDetalle DetalleSeleccionado { get; set; } = new();
    public string Mensaje { get; set; } = string.Empty;
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();
    public List<Prestamos> ListaPrestamos { get; set; } = new List<Prestamos>();
    public int IdPrestamo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListaDeudores = await deudoresService.Listar(d => d.DeudorId > 0);
    }

    public async Task BuscarPrestamosPendientes()
    {
        ListaPrestamos = await prestamosService.GetPrestamosPendientes(Cobro.DeudorId);
    }

    private async Task HandlePrestamoSelected((Prestamos prestamo, double valor) selection)
    {
        var detalle = new CobrosDetalle
            {
                PrestamoId = selection.prestamo.PrestamosId,
                ValorCobrado = selection.valor
            };

        Cobro.CobroDetalle.Add(detalle);
        Cobro.Monto = Cobro.CobroDetalle.Sum(d => d.ValorCobrado);

        DetalleSeleccionado = new CobrosDetalle();
        await Task.CompletedTask;
    }

    public async Task Guardar()
    {
        var creado = await cobroService.Guardar(Cobro);

        if (creado)
        {
            Mensaje = "Creado correctamente";
            navigationManager.NavigateTo("/Registro/Cobro/Index");
        }
        else
        {
            Mensaje = "No se ha creado correctamente";
        }
    }

    public async Task RemoverDetalle(CobrosDetalle detalle)
    {
        Cobro.CobroDetalle.Remove(detalle);
        //
        DetalleSeleccionado = detalle;
    }
}

